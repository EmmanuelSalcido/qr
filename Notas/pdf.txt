




*********CODIGO VIEJO DE PC EN LOCAL********
def exportar_pdf_por_registro(registro_id):
    """Exporta el historial SOLO del registro indicado (evita mezclar usos del mismo QR)."""
    conn = get_db()
    cursor = conn.cursor(dictionary=True)

    # Datos del registro
    cursor.execute("SELECT * FROM registros WHERE id = %s", (registro_id,))
    datos = cursor.fetchone()
    if not datos:
        cursor.close()
        conn.close()
        return "Registro no encontrado", 404

    # Historial del registro
    cursor.execute(
        "SELECT estacion, fecha FROM seguimiento WHERE registro_id = %s ORDER BY fecha",
        (registro_id,)
    )
    historial_pdf = cursor.fetchall()

    # Construir PDF
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", 'B', 16)
    pdf.cell(0, 10, f"Historial del Registro #{registro_id} (QR {datos['qr_id']})", ln=True, align="C")
    pdf.ln(10)

    pdf.set_font("Arial", '', 12)
    campos = ["id", "qr_id", "folio", "chofer", "licencia", "empresa", "tipo_carga", "estacion", "fecha", "activo"]
    for key in campos:
        if key in datos:
            pdf.cell(0, 8, f"{key.capitalize()}: {datos[key]}", ln=True)

    # Tiempo dentro (si hay al menos una entrada y salida en este registro)
    if historial_pdf:
        entrada = historial_pdf[0]['fecha']
        salida = historial_pdf[-1]['fecha']
        if isinstance(entrada, str):
            entrada = datetime.strptime(entrada, "%Y-%m-%d %H:%M:%S")
        if isinstance(salida, str):
            salida = datetime.strptime(salida, "%Y-%m-%d %H:%M:%S")
        tiempo_dentro = salida - entrada
        pdf.cell(0, 8, f"Tiempo dentro: {tiempo_dentro}", ln=True)
    else:
        pdf.cell(0, 8, "Tiempo dentro: N/A", ln=True)
    pdf.ln(5)

    pdf.set_font("Arial", 'B', 14)
    pdf.cell(0, 10, "Historial de estaciones:", ln=True)
    pdf.set_font("Arial", '', 12)
    if historial_pdf:
        for h in historial_pdf:
            pdf.cell(0, 8, f"{h['fecha']} - {h['estacion']}", ln=True)
    else:
        pdf.cell(0, 8, "No hay historial", ln=True)

    # Salida del PDF
    pdf_buffer = io.BytesIO()
    pdf.output(pdf_buffer)
    pdf_buffer.seek(0)

    cursor.close()
    conn.close()
    return send_file(
        pdf_buffer,
        as_attachment=True,
        download_name=f"registro_{registro_id}_historial.pdf",
        mimetype='application/pdf'
    )

    ********************* sql server
    #def get_db():
    import mysql.connector
    return mysql.connector.connect(
        host="localhost",
        user="qruser",
        password="password123",
        database="qr_alco"
    )

    ******************* sql pruebas
    def get_db():
    import mysql.connector
    return mysql.connector.connect(
        host="localhost",
        user="root",       
        password="",      
        database="qr_choferes"
    )
    